{
  "problems": [
    {
      "id": "php/hamming",
      "track_id": "php",
      "language": "PHP",
      "slug": "hamming",
      "name": "Hamming",
      "files": {
        "hamming_test.php": "<?php\n\nrequire \"hamming.php\";\n\nclass HammingComparatorTest extends PHPUnit_Framework_TestCase\n{\n\n    public function testNoDifferenceBetweenIdenticalStrands()\n    {\n        $this->assertEquals(0, distance('A', 'A'));\n    }\n\n    public function testCompleteHammingDistanceOfForSingleNucleotideStrand()\n    {\n        $this->assertEquals(1, distance('A', 'G'));\n    }\n\n    public function testCompleteHammingDistanceForSmallStrand()\n    {\n        $this->assertEquals(2, distance('AG', 'CT'));\n    }\n\n    public function testSmallHammingDistance()\n    {\n        $this->assertEquals(1, distance('AT', 'CT'));\n    }\n\n    public function testSmallHammingDistanceInLongerStrand()\n    {\n        $this->assertEquals(1, distance('GGACG', 'GGTCG'));\n    }\n\n    public function testLargeHammingDistance()\n    {\n        $this->assertEquals(4, distance('GATACA', 'GCATAA'));\n    }\n\n    public function testHammingDistanceInVeryLongStrand()\n    {\n        $this->assertEquals(9, distance('GGACGGATTCTG', 'AGGACGGATTCT'));\n    }\n}\n",
        "README.md": "# Hamming\n\nWrite a program that can calculate the Hamming difference between two DNA strands.\n\nA mutation is simply a mistake that occurs during the creation or\ncopying of a nucleic acid, in particular DNA. Because nucleic acids are\nvital to cellular functions, mutations tend to cause a ripple effect\nthroughout the cell. Although mutations are technically mistakes, a very\nrare mutation may equip the cell with a beneficial attribute. In fact,\nthe macro effects of evolution are attributable by the accumulated\nresult of beneficial microscopic mutations over many generations.\n\nThe simplest and most common type of nucleic acid mutation is a point\nmutation, which replaces one base with another at a single nucleotide.\n\nBy counting the number of differences between two homologous DNA strands\ntaken from different genomes with a common ancestor, we get a measure of\nthe minimum number of point mutations that could have occurred on the\nevolutionary path between the two strands.\n\nThis is called the 'Hamming distance'.\n\nIt is found by comparing two DNA strands and counting how many of the\nnucleotides are different from their equivalent in the other string.\n\n    GAGCCTACTAACGGGAT\n    CATCGTAATGACGGCCT\n    ^ ^ ^  ^ ^    ^^\n\nThe Hamming distance between these two DNA strands is 7.\n\n# Implementation notes\n\nThe Hamming distance is only defined for sequences of equal length. This means\nthat based on the definition, each language could deal with getting sequences\nof equal length differently.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nThe Calculating Point Mutations problem at Rosalind [view source](http://rosalind.info/problems/hamm/)\n"
      },
      "fresh": false
    },
    {
      "id": "php/gigasecond",
      "track_id": "php",
      "language": "PHP",
      "slug": "gigasecond",
      "name": "Gigasecond",
      "files": {
        "gigasecond_test.php": "<?php\n\nrequire \"gigasecond.php\";\n\nclass GigasecondTest extends \\PHPUnit_Framework_TestCase\n{\n\n    public function dateSetup($date)\n    {\n        $UTC = new DateTimeZone(\"UTC\");\n        $date = new DateTime($date, $UTC);\n        return $date;\n    }\n\n    public function test1()\n    {\n        $date = GigasecondTest::dateSetup(\"2011-04-25\");\n        $gs = from($date);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"2043-01-01 01:46:40\");\n    }\n\n    public function test2()\n    {\n        $date = GigasecondTest::dateSetup(\"1977-06-13\");\n        $gs = from($date);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"2009-02-19 01:46:40\");\n    }\n\n    public function test3()\n    {\n        $date = GigasecondTest::dateSetup(\"1959-7-19\");\n        $gs = from($date);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"1991-03-27 01:46:40\");\n    }\n\n    public function test4()\n    {\n        $date = GigasecondTest::dateSetup(\"2015-01-24 22:00:00\");\n        $gs = from($date);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"2046-10-02 23:46:40\");\n    }\n\n    public function test5()\n    {\n        $date = GigasecondTest::dateSetup(\"2015-01-24 23:59:59\");\n        $gs = from($date);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"2046-10-03 01:46:39\");\n    }\n\n    public function testYourself()\n    {\n        $this->markTestSkipped();\n        $your_birthday = GigasecondTest::dateSetup(\"your_birthday\");\n        $gs = from($your_birthday);\n\n        $this->assertSame($gs->format(\"Y-m-d H:i:s\"), \"2009-01-31 01:46:40\");\n    }\n}\n",
        "README.md": "# Gigasecond\n\nWrite a program that will calculate the date that someone turned or will celebrate their 1 Gs anniversary.\n\nA gigasecond is one billion (10**9) seconds.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nChapter 9 in Chris Pine's online Learn to Program tutorial. [view source](http://pine.fm/LearnToProgram/?Chapter=09)\n"
      },
      "fresh": false
    },
    {
      "id": "php/rna-transcription",
      "track_id": "php",
      "language": "PHP",
      "slug": "rna-transcription",
      "name": "Rna Transcription",
      "files": {
        "rna-transcription_test.php": "<?php\n\nrequire \"rna-transcription.php\";\n\nclass ComplementTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testTranscribesGuanineToCytosine()\n    {\n        $this->assertSame(toRna('C'), 'G');\n    }\n\n    public function testTranscribesCytosineToGuanine()\n    {\n        $this->assertSame(toRna('G'), 'C');\n    }\n\n    public function testTranscribesThymineToAdenine()\n    {\n        $this->assertSame(toRna('T'), 'A');\n    }\n\n    public function testTranscribesAdenineToUracil()\n    {\n        $this->assertSame(toRna('A'), 'U');\n    }\n\n    public function testTranscribesAllOccurencesOne()\n    {\n        $this->assertSame(toRna('ACGTGGTCTTAA'), 'UGCACCAGAAUU');\n    }\n}\n",
        "README.md": "# Rna Transcription\n\nWrite a program that, given a DNA strand, returns its RNA complement (per RNA transcription).\n\nBoth DNA and RNA strands are a sequence of nucleotides.\n\nThe four nucleotides found in DNA are adenine (**A**), cytosine (**C**),\nguanine (**G**) and thymine (**T**).\n\nThe four nucleotides found in RNA are adenine (**A**), cytosine (**C**),\nguanine (**G**) and uracil (**U**).\n\nGiven a DNA strand, its transcribed RNA strand is formed by replacing\neach nucleotide with its complement:\n\n* `G` -> `C`\n* `C` -> `G`\n* `T` -> `A`\n* `A` -> `U`\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nRosalind [view source](http://rosalind.info/problems/rna)\n"
      },
      "fresh": false
    },
    {
      "id": "php/raindrops",
      "track_id": "php",
      "language": "PHP",
      "slug": "raindrops",
      "name": "Raindrops",
      "files": {
        "raindrops_test.php": "<?php\n\nrequire \"raindrops.php\";\n\nclass RaindropsTest extends PHPUnit_Framework_TestCase\n{\n    public function test1()\n    {\n        $this->assertSame(\"1\", raindrops(1));\n    }\n\n    public function test3()\n    {\n        $this->assertSame(\"Pling\", raindrops(3));\n    }\n\n    public function test5()\n    {\n        $this->assertSame(\"Plang\", raindrops(5));\n    }\n\n    public function test7()\n    {\n        $this->assertSame(\"Plong\", raindrops(7));\n    }\n\n    public function test6()\n    {\n        $this->assertSame(\"Pling\", raindrops(6));\n    }\n\n    public function test10()\n    {\n        $this->assertSame(\"Plang\", raindrops(10));\n    }\n\n    public function test14()\n    {\n        $this->assertSame(\"Plong\", raindrops(14));\n    }\n\n    public function test15()\n    {\n        $this->assertSame(\"PlingPlang\", raindrops(15));\n    }\n\n    public function test21()\n    {\n        $this->assertSame(\"PlingPlong\", raindrops(21));\n    }\n\n    public function test25()\n    {\n        $this->assertSame(\"Plang\", raindrops(25));\n    }\n\n    public function test35()\n    {\n        $this->assertSame(\"PlangPlong\", raindrops(35));\n    }\n\n    public function test49()\n    {\n        $this->assertSame(\"Plong\", raindrops(49));\n    }\n\n    public function test52()\n    {\n        $this->assertSame(\"52\", raindrops(52));\n    }\n\n    public function test105()\n    {\n        $this->assertSame(\"PlingPlangPlong\", raindrops(105));\n    }\n\n    public function test12121()\n    {\n        $this->assertSame(\"12121\", raindrops(12121));\n    }\n}\n",
        "README.md": "# Raindrops\n\nWrite a program that converts a number to a string, the contents of which depends on the number's prime factors.\n\n- If the number contains 3 as a prime factor, output 'Pling'.\n- If the number contains 5 as a prime factor, output 'Plang'.\n- If the number contains 7 as a prime factor, output 'Plong'.\n- If the number does not contain 3, 5, or 7 as a prime factor,\n  just pass the number's digits straight through.\n\n## Examples\n\n- 28's prime-factorization is 2, 2, 7.\n  - In raindrop-speak, this would be a simple \"Plong\".\n- 1755 prime-factorization is 3, 3, 3, 5, 13.\n  - In raindrop-speak, this would be a \"PlingPlang\".\n- The prime factors of 34 are 2 and 17.\n  - Raindrop-speak doesn't know what to make of that,\n    so it just goes with the straightforward \"34\".\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nA variation on a famous interview question intended to weed out potential candidates. [view source](http://jumpstartlab.com)\n"
      },
      "fresh": false
    },
    {
      "id": "php/difference-of-squares",
      "track_id": "php",
      "language": "PHP",
      "slug": "difference-of-squares",
      "name": "Difference Of Squares",
      "files": {
        "difference-of-squares_test.php": "<?php\n\nrequire_once \"difference-of-squares.php\";\n\nclass SquaresTest extends PHPUnit_Framework_TestCase\n{\n    public function testSquareOfSumsTo5()\n    {\n        $this->assertEquals(225, squareOfSums(5));\n    }\n\n    public function testSumOfSquaresTo5()\n    {\n        $this->assertEquals(55, sumOfSquares(5));\n    }\n\n    public function testDifferenceOfSumsTo5()\n    {\n        $this->assertEquals(170, difference(5));\n    }\n\n    public function testSquareOfSumsTo10()\n    {\n        $this->assertEquals(3025, squareOfSums(10));\n    }\n\n    public function testSumOfSquaresTo10()\n    {\n        $this->assertEquals(385, sumOfSquares(10));\n    }\n\n    public function testDifferenceOfSumsTo10()\n    {\n        $this->assertEquals(2640, difference(10));\n    }\n\n    public function testSquareOfSumsTo100()\n    {\n        $this->assertEquals(25502500, squareOfSums(100));\n    }\n\n    public function testSumOfSquaresTo100()\n    {\n        $this->assertEquals(338350, sumOfSquares(100));\n    }\n\n    public function testDifferenceOfSumsTo100()\n    {\n        $this->assertEquals(25164150, difference(100));\n    }\n}\n",
        "README.md": "# Difference Of Squares\n\nFind the difference between the sum of the squares and the square of the sums of the first N natural numbers.\n\nThe sum of the squares of the first ten natural numbers is,\n\n    1**2 + 2**2 + ... + 10**2 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n    (1 + 2 + ... + 10)**2 = 55**2 = 3025\n\nHence the difference between the sum of the squares of the first ten\nnatural numbers and the square of the sum is 3025 - 385 = 2640.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nProblem 6 at Project Euler [view source](http://projecteuler.net/problem=6)\n"
      },
      "fresh": false
    },
    {
      "id": "php/roman-numerals",
      "track_id": "php",
      "language": "PHP",
      "slug": "roman-numerals",
      "name": "Roman Numerals",
      "files": {
        "roman-numerals_test.php": "<?php\n\nrequire_once \"roman-numerals.php\";\n\nclass RomanTest extends PHPUnit_Framework_TestCase\n{\n    public function test1()\n    {\n        $this->assertSame('I', toRoman(1));\n    }\n\n    public function test2()\n    {\n        $this->assertSame('II', toRoman(2));\n    }\n\n    public function test3()\n    {\n        $this->assertSame('III', toRoman(3));\n    }\n\n    public function test4()\n    {\n        $this->assertSame('IV', toRoman(4));\n    }\n\n    public function test5()\n    {\n        $this->assertSame('V', toRoman(5));\n    }\n\n    public function test6()\n    {\n        $this->assertSame('VI', toRoman(6));\n    }\n\n    public function test9()\n    {\n        $this->assertSame('IX', toRoman(9));\n    }\n\n    public function test27()\n    {\n        $this->assertSame('XXVII', toRoman(27));\n    }\n\n    public function test48()\n    {\n        $this->assertSame('XLVIII', toRoman(48));\n    }\n\n    public function test49()\n    {\n        $this->assertSame('XLIX', toRoman(49));\n    }\n\n    public function test59()\n    {\n        $this->assertSame('LIX', toRoman(59));\n    }\n\n    public function test93()\n    {\n        $this->assertSame('XCIII', toRoman(93));\n    }\n\n    public function test141()\n    {\n        $this->assertSame('CXLI', toRoman(141));\n    }\n\n    public function test163()\n    {\n        $this->assertSame('CLXIII', toRoman(163));\n    }\n\n    public function test402()\n    {\n        $this->assertSame('CDII', toRoman(402));\n    }\n\n    public function test575()\n    {\n        $this->assertSame('DLXXV', toRoman(575));\n    }\n\n    public function test911()\n    {\n        $this->assertSame('CMXI', toRoman(911));\n    }\n\n    public function test1024()\n    {\n        $this->assertSame('MXXIV', toRoman(1024));\n    }\n\n    public function test2014()\n    {\n        $this->assertSame('MCMXCVIII', toRoman(1998));\n    }\n\n    public function test2999()\n    {\n        $this->assertSame('MMCMXCIX', toRoman(2999));\n    }\n\n    public function test3000()\n    {\n        $this->assertSame('MMM', toRoman(3000));\n    }\n}\n",
        "README.md": "# Roman Numerals\n\nWrite a function to convert from normal numbers to Roman Numerals: e.g.\n\nThe Romans were a clever bunch. They conquered most of Europe and ruled\nit for hundreds of years. They invented concrete and straight roads and\neven bikinis. One thing they never discovered though was the number\nzero. This made writing and dating extensive histories of their exploits\nslightly more challenging, but the system of numbers they came up with\nis still in use today. For example the BBC uses Roman numerals to date\ntheir programmes.\n\nThe Romans wrote numbers using letters - I, V, X, L, C, D, M. (notice\nthese letters have lots of straight lines and are hence easy to hack\ninto stone tablets).\n\n```\n 1  => I\n10  => X\n 7  => VII\n```\n\nThere is no need to be able to convert numbers larger than about 3000.\n(The Romans themselves didn't tend to go any higher)\n\nWikipedia says: Modern Roman numerals ... are written by expressing each\ndigit separately starting with the left most digit and skipping any\ndigit with a value of zero.\n\nTo see this in practice, consider the example of 1990.\n\nIn Roman numerals 1990 is MCMXC:\n\n1000=M\n900=CM\n90=XC\n\n2008 is written as MMVIII:\n\n2000=MM\n8=VIII\n\nSee also: http://www.novaroma.org/via_romana/numbers.html\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nThe Roman Numeral Kata [view source](http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals)\n"
      },
      "fresh": false
    },
    {
      "id": "php/robot-name",
      "track_id": "php",
      "language": "PHP",
      "slug": "robot-name",
      "name": "Robot Name",
      "files": {
        "robot-name_test.php": "<?php\n\nrequire_once \"robot-name.php\";\n\nclass RobotTest extends PHPUnit_Framework_TestCase\n{\n    /** @var Robot $robot */\n    protected $robot = null;\n\n    public function setUp()\n    {\n        $this->robot = new Robot();\n    }\n\n    public function testHasName()\n    {\n        $this->assertRegExp('/\\w{2}\\d{3}/', $this->robot->getName());\n    }\n\n    public function testNameSticks()\n    {\n        $old = $this->robot->getName();\n\n        $this->assertSame($this->robot->getName(), $old);\n    }\n\n    public function testDifferentRobotsHaveDifferentNames()\n    {\n        $other_bot = new Robot();\n\n        $this->assertNotSame($other_bot->getName(), $this->robot->getName());\n\n        unset($other_bot);\n    }\n\n    public function testresetName()\n    {\n        $name1 = $this->robot->getName();\n\n        $this->robot->reset();\n\n        $name2 = $this->robot->getName();\n\n        $this->assertNotSame($name1, $name2);\n\n        $this->assertRegExp('/\\w{2}\\d{3}/', $name2);\n    }\n}\n",
        "README.md": "# Robot Name\n\nWrite a program that manages robot factory settings.\n\nWhen robots come off the factory floor, they have no name.\n\nThe first time you boot them up, a random name is generated, such as\nRX837 or BC811.\n\nEvery once in a while we need to reset a robot to its factory settings,\nwhich means that their name gets wiped. The next time you ask, it gets a\nnew name.\n\n\n## For bonus points\n\nDid you get the tests passing and the code clean? If you want to, these\nare some additional things you could try:\n\n- Random names means a risk of collisions. Make sure the same name is\n  never used twice. Feel free to introduce additional tests.\n\nThen please share your thoughts in a comment on the submission. Did this\nexperiment make the code better? Worse? Did you learn anything from it?\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nA debugging session with Paul Blackwell at gSchool. [view source](http://gschool.it)\n"
      },
      "fresh": false
    },
    {
      "id": "php/leap",
      "track_id": "php",
      "language": "PHP",
      "slug": "leap",
      "name": "Leap",
      "files": {
        "leap_test.php": "<?php\n\nrequire \"leap.php\";\n\nclass YearTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testLeapYear()\n    {\n        $this->assertTrue(isLeap(1996));\n    }\n\n    public function testNonLeapYear()\n    {\n        $this->assertFalse(isLeap(1997));\n    }\n\n    public function testNonLeapEvenYear()\n    {\n        $this->assertFalse(isLeap(1998));\n    }\n\n    public function testCentury()\n    {\n        $this->assertFalse(isLeap(1900));\n    }\n\n    public function testFourthCentury()\n    {\n        $this->assertTrue(isLeap(2400));\n    }\n}\n",
        "README.md": "# Leap\n\nWrite a program that will take a year and report if it is a leap year.\n\nThe tricky thing here is that a leap year occurs:\n\n```plain\non every year that is evenly divisible by 4\n  except every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n```\n\nFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\nyear, but 2000 is.\n\nIf your language provides a method in the standard library that does\nthis look-up, pretend it doesn't exist and implement it yourself.\n\n## Notes\n\nFor a delightful, four minute explanation of the whole leap year\nphenomenon, go watch [this youtube video][video].\n\n[video]: http://www.youtube.com/watch?v=xX96xng7sAE\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nJavaRanch Cattle Drive, exercise 3 [view source](http://www.javaranch.com/leap.jsp)\n"
      },
      "fresh": false
    },
    {
      "id": "php/trinary",
      "track_id": "php",
      "language": "PHP",
      "slug": "trinary",
      "name": "Trinary",
      "files": {
        "trinary_test.php": "<?php\n\nrequire \"trinary.php\";\n\nclass TrinaryTest extends \\PHPUnit_Framework_TestCase\n{\n    public function test1IsDecimal1()\n    {\n        $trinary = new Trinary('1');\n        $this->assertEquals(1, $trinary->toDecimal());\n    }\n\n    public function test2IsDecimal2()\n    {\n        $trinary = new Trinary('2');\n        $this->assertEquals(2, $trinary->toDecimal());\n    }\n\n    public function test10IsDecimal3()\n    {\n        $trinary = new Trinary('10');\n        $this->assertEquals(3, $trinary->toDecimal());\n    }\n\n    public function test11IsDecimal4()\n    {\n        $trinary = new Trinary('11');\n        $this->assertEquals(4, $trinary->toDecimal());\n    }\n\n    public function test100IsDecimal9()\n    {\n        $trinary = new Trinary('100');\n        $this->assertEquals(9, $trinary->toDecimal());\n    }\n\n    public function test112IsDecimal14()\n    {\n        $trinary = new Trinary('112');\n        $this->assertEquals(14, $trinary->toDecimal());\n    }\n\n    public function test222IsDecimal26()\n    {\n        $trinary = new Trinary('222');\n        $this->assertEquals(26, $trinary->toDecimal());\n    }\n\n    public function test1122000120IsDecimal32091()\n    {\n        $trinary = new Trinary('1122000120');\n        $this->assertEquals(32091, $trinary->toDecimal());\n    }\n\n    public function testInvalidTrinaryIsDecimal0()\n    {\n        $trinary = new Trinary('carrot');\n        $this->assertSame(0, $trinary->toDecimal());\n    }\n}\n",
        "README.md": "# Trinary\n\nWrite a program that will convert a trinary number, represented as a string (e.g. '102012'), to its decimal equivalent using first principles.\n\nThe program should consider strings specifying an invalid trinary as the\nvalue 0.\n\nTrinary numbers contain three symbols: 0, 1, and 2.\n\nThe last place in a trinary number is the 1's place. The second to last\nis the 3's place, the third to last is the 9's place, etc.\n\n```bash\n# \"102012\"\n    1       0       2       0       1       2    # the number\n1*3^5 + 0*3^4 + 2*3^3 + 0*3^2 + 1*3^1 + 2*3^0    # the value\n  243 +     0 +    54 +     0 +     3 +     2 =  302\n```\n\nIf your language provides a method in the standard library to perform the\nconversion, pretend it doesn't exist and implement it yourself.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nAll of Computer Science [view source](http://www.wolframalpha.com/input/?i=binary&a=*C.binary-_*MathWorld-)\n"
      },
      "fresh": false
    },
    {
      "id": "php/bowling",
      "track_id": "php",
      "language": "PHP",
      "slug": "bowling",
      "name": "Bowling",
      "files": {
        "bowling_test.php": "<?php\n\nrequire \"bowling.php\";\n\n/**\n * Translated from original source:\n * http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata\n */\nclass GameTest extends \\PHPUnit_Framework_TestCase\n{\n    /** @var Game */\n    private $game;\n\n    public function setUp()\n    {\n        $this->game = new Game();\n    }\n\n    public function testGutterGame()\n    {\n        $this->rollMany(20, 0);\n\n        $this->assertEquals(0, $this->game->score());\n    }\n\n    public function testAllOnes()\n    {\n        $this->rollMany(20, 1);\n\n        $this->assertEquals(20, $this->game->score());\n    }\n\n    public function testOneSpare()\n    {\n        $this->rollSpare();\n        $this->game->roll(3);\n        $this->rollMany(17, 0);\n\n        $this->assertEquals(16, $this->game->score());\n    }\n\n    public function testOneStrike()\n    {\n        $this->rollStrike();\n        $this->game->roll(3);\n        $this->game->roll(4);\n        $this->rollMany(16, 0);\n\n        $this->assertEquals(24, $this->game->score());\n    }\n\n    public function testPerfectGame()\n    {\n        $this->rollMany(12, 10);\n\n        $this->assertEquals(300, $this->game->score());\n    }\n\n    private function rollStrike()\n    {\n        $this->game->roll(10);\n    }\n\n    private function rollSpare()\n    {\n        $this->rollMany(2, 5);\n    }\n\n    private function rollMany($n, $pins)\n    {\n        for ($i = 0; $i < $n; $i++) {\n            $this->game->roll($pins);\n        }\n    }\n}\n",
        "README.md": "# Bowling\n\nScore a bowling game\n\n## Scoring Bowling\n\nThe game consists of 10 frames. In each frame the player has two\nopportunities to knock down 10 pins.  The score for the frame is the\ntotal number of pins knocked down, plus bonuses for strikes and spares.\n\nA spare is when the player knocks down all 10 pins in two tries.  The\nbonus for that frame is the number of pins knocked down by the next\nroll.  So in frame 3 above, the score is 10 (the total number knocked\ndown) plus a bonus of 5 (the number of pins knocked down on the next\nroll.)\n\nA strike is when the player knocks down all 10 pins on his first try.\nThe bonus for that frame is the value of the next two balls rolled.\n\nIn the tenth frame a player who rolls a spare or strike is allowed to\nroll the extra balls to complete the frame.  However no more than three\nballs can be rolled in tenth frame.\n\n## Requirements\n\nWrite a class named “Game” that has two methods:\n\n* `roll(pins : int)` is called each time the player rolls a ball.  The\n  argument is the number of pins knocked down.\n* `score() : int` is called only at the very end of the game.  It\n  returns the total score for that game.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nThe Bowling Game Kata at but UncleBob [view source](http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata)\n"
      },
      "fresh": false
    },
    {
      "id": "php/clock",
      "track_id": "php",
      "language": "PHP",
      "slug": "clock",
      "name": "Clock",
      "files": {
        "clock_test.php": "<?php\n\nrequire \"clock.php\";\n\nclass ClockTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testOnTheHour()\n    {\n        $clock = new Clock(8);\n\n        $this->assertEquals('08:00', $clock->__toString());\n    }\n\n    public function testPastTheHour()\n    {\n        $clock = new Clock(11, 9);\n\n        $this->assertEquals('11:09', $clock->__toString());\n    }\n\n    public function testAddingAFewMinutes()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->add(3);\n\n        $this->assertEquals('10:03', $clock->__toString());\n    }\n\n    public function testAddingOverAnHour()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->add(61);\n\n        $this->assertEquals('11:01', $clock->__toString());\n    }\n\n    public function testWrapAroundAtMidnight()\n    {\n        $clock = new Clock(23, 30);\n\n        $clock = $clock->add(60);\n\n        $this->assertEquals('00:30', $clock->__toString());\n    }\n\n    public function testSubtractMinutes()\n    {\n        $clock = new Clock(10);\n\n        $clock = $clock->sub(90);\n\n        $this->assertEquals('08:30', $clock->__toString());\n    }\n\n    public function testWrapAroundBackwards()\n    {\n        $clock = new Clock(0, 30);\n\n        $clock = $clock->sub(60);\n\n        $this->assertEquals('23:30', $clock->__toString());\n    }\n\n    public function testWrapAroundDay()\n    {\n        $clock = new Clock(5, 32);\n\n        $clock = $clock->add(25 * 60);\n\n        $this->assertEquals('06:32', $clock->__toString());\n    }\n\n    public function testWrapAroundDayBackwards()\n    {\n        $clock = new Clock(5, 32);\n\n        $clock = $clock->sub(25 * 60);\n\n        $this->assertEquals('04:32', $clock->__toString());\n    }\n\n    public function testEquivalentClocks()\n    {\n        $this->assertEquals(new Clock(15, 37), new Clock(15, 37));\n    }\n\n    public function testInequivalentClocks()\n    {\n        $this->assertNotEquals(new Clock(01, 01), new Clock(18, 32));\n    }\n}\n",
        "README.md": "# Clock\n\nImplement a clock that handles times without dates.\n\nCreate a clock that is independent of date.\n\nYou should be able to add and subtract minutes to it.\n\nTwo clocks that represent the same time should be equal to each other.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nPairing session with Erin Drummond [view source](https://twitter.com/ebdrummond)\n"
      },
      "fresh": false
    },
    {
      "id": "php/wordy",
      "track_id": "php",
      "language": "PHP",
      "slug": "wordy",
      "name": "Wordy",
      "files": {
        "wordy_test.php": "<?php\n\nrequire \"wordy.php\";\n\nclass WordProblemTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testAdd1()\n    {\n        $problem = new WordProblem('What is 1 plus 1?');\n        $this->assertEquals(2, $problem->answer());\n    }\n\n    public function testAdd2()\n    {\n        $problem = new WordProblem('What is 53 plus 2?');\n        $this->assertEquals(55, $problem->answer());\n    }\n\n    public function testAddNegativeNumbers()\n    {\n        $problem = new WordProblem('What is -1 plus -10?');\n        $this->assertEquals(-11, $problem->answer());\n    }\n\n    public function testAddMoreDigits()\n    {\n        $problem = new WordProblem('What is 123 plus 45678?');\n        $this->assertEquals(45801, $problem->answer());\n    }\n\n    public function testSubtract()\n    {\n        $problem = new WordProblem('What is 4 minus -12?');\n        $this->assertEquals(16, $problem->answer());\n    }\n\n    public function testMultiply()\n    {\n        $problem = new WordProblem('What is -3 multiplied by 25?');\n        $this->assertEquals(-75, $problem->answer());\n    }\n\n    public function testDivide()\n    {\n        $problem = new WordProblem('What is 33 divided by -3?');\n        $this->assertEquals(-11, $problem->answer());\n    }\n\n    public function testAddTwice()\n    {\n        $problem = new WordProblem('What is 1 plus 1 plus 1?');\n        $this->assertEquals(3, $problem->answer());\n    }\n\n    public function testAddThenSubtract()\n    {\n        $problem = new WordProblem('What is 1 plus 5 minus -2?');\n        $this->assertEquals(8, $problem->answer());\n    }\n\n    public function testSubtractTwice()\n    {\n        $problem = new WordProblem('What is 20 minus 4 minus 13?');\n        $this->assertEquals(3, $problem->answer());\n    }\n\n    public function testSubtractThenAdd()\n    {\n        $problem = new WordProblem('What is 17 minus 6 plus 3?');\n        $this->assertEquals(14, $problem->answer());\n    }\n\n    public function testMultiplyTwice()\n    {\n        $problem = new WordProblem('What is 2 multiplied by -2 multiplied by 3?');\n        $this->assertEquals(-12, $problem->answer());\n    }\n\n    public function testAddThenMultiply()\n    {\n        $problem = new WordProblem('What is -3 plus 7 multiplied by -2?');\n        $this->assertEquals(-8, $problem->answer());\n    }\n\n    public function testDivideTwice()\n    {\n        $problem = new WordProblem('What is -12 divided by 2 divided by -3?');\n        $this->assertEquals(2, $problem->answer());\n    }\n\n    public function testTooAdvanced()\n    {\n        $this->setExpectedException('InvalidArgumentException');\n\n        $problem = new WordProblem('What is 53 cubed?');\n        $problem->answer();\n    }\n\n    public function testIrrelevant()\n    {\n        $this->setExpectedException('InvalidArgumentException');\n\n        $problem = new WordProblem('Who is the president of the United States?');\n        $problem->answer();\n    }\n}\n",
        "README.md": "# Wordy\n\nWrite a program that takes a word problem and returns the answer as an integer.\n\n## Step 1\n\nE.g.\n\n> What is 5 plus 13?\n\nThe program should handle large numbers and negative numbers.\n\nUse the tests to drive your solution by deleting the `skip` in one test\nat a time.\n\n## Step 2\n\nE.g.\n\n> What is 5 plus 13?\n\n> What is 7 minus 5?\n\n> What is 6 multiplied by 4?\n\n> What is 25 divided by 5?\n\n## Step 3\n\nE.g.\n\n> What is 5 plus 13 plus 6?\n\n> What is 7 minus 5 minus 1?\n\n> What is 9 minus 3 plus 5?\n\n> What is 3 plus 5 minus 8?\n\n## Step 4\n\nE.g.\n\n> What is 5 plus 13?\n\n> What is 7 minus 5?\n\n> What is 6 times 4?\n\n> What is 25 divided by 5?\n\n> What is 78 plus 5 minus 3?\n\n> What is 18 times 3 plus 16?\n\n> What is 4 times 3 divided by 6?\n\n> What is 4 plus 3 times 2?\n\n## Extensions\n\nImplement questions of the type:\n\n> What is 2 raised to the 5th power?\n\nRemember to write failing tests for this code.\n\n## Making the Test Suite Pass\n\n1. Get [PHPUnit].\n\n        % wget --no-check-certificate https://phar.phpunit.de/phpunit.phar\n        % chmod +x phpunit.phar\n\n2. Execute the tests for an assignment.\n\n        % phpunit.phar wordy/wordy_test.php\n\n[PHPUnit]: http://phpunit.de\n\n\n## Source\n\nInspired by one of the generated questions in the Extreme Startup game. [view source](https://github.com/rchatley/extreme_startup)\n"
      },
      "fresh": false
    }
  ]
}
